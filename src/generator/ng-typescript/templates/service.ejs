import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

<%_ for (const importEntry of buildImports()) { -%>
import { <%- importEntry.entities.join(', ') %> } from '<%- importEntry.path %>';
<% } %>
@Injectable({ providedIn: 'root' })
export class <%- name %>Service {
	constructor(private readonly http: HttpClient) {}
	<%_ for (const path of paths) { -%>

	<%- path.name %>(
		<%_ for (const p of (path.requestPathParameters ?? [])) { -%>
		<%- p.name %><%- !p.required ? '?' : '' %>: <%- p.type %><%- p.nullable ? ' | null' : '' %>,
		<%_ } -%>
		<%_ if (path.requestQueryParametersModelName) { -%>
		request: <%- path.requestQueryParametersModelName %>,
		<%_ } -%>
		<%_ if (path.requestBodyModelName) { -%>
		request: <%- path.requestBodyModelName %>,
		<%_ } -%>
	): Observable<<%- path.responseModelName %>> {
		const url = `<%- parametrizeUrlPattern(path.urlPattern) %>`;

		<%_ if (path.requestQueryParametersMapping) { -%>
		const params = new HttpParams({
			fromObject: {
				<%_ for (const queryParams of (path.requestQueryParametersMapping)) { -%>
				'<%- queryParams[0] %>': request.<%- queryParams[1] %>,
				<%_ } -%>
			},
		});

		<%_ } -%>
		<%_ if (path.isMultipart) { -%>
		const formData = new FormData();
		Object.entries(request).forEach(([key, value]) => formData.append(key, value));

		<%_ } -%>
		return this.http.<%- path.method %><<%- path.responseModelName %>>(
			url,
			<%_ if (path.requestBodyModelName && !path.isMultipart) { -%>
			request,
			<%_ } -%>
			<%_ if (path.requestBodyModelName && path.isMultipart) { -%>
			formData,
			{ observe: 'events', reportProgress: true },
			<%_ } -%>
			<%_ if (path.requestQueryParametersMapping) { -%>
			{ params },
			<%_ } -%>
		);
	}
	<%_ } -%>
}
