import { Injectable } from '@angular/core';
import { HttpClient, HttpParams, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';

import { toQueryParams } from '../internals';
<%_ for (const importEntry of getImportEntries()) { -%>
import { <%- importEntry.keys.join(', ') %> } from '<%- importEntry.path %>';
<% } %>
@Injectable({ providedIn: 'root' })
export class <%- name %>Service {
	constructor(private readonly http: HttpClient) {}
	<%_ for (const path of paths) { -%>

	<%_ const jsdocResult = jsdoc.build(toJSDocConfig(path, 'request', 'requestBody'), 1) -%>
	<%_ if (jsdocResult) { -%>
<%- jsdocResult %>
	<%_ } -%>
	<%_ if (path.isMultipart) { -%>
	<%- path.name %>(
		<%_ for (const p of (path.requestPathParameters ?? [])) { -%>
		<%- p.name %><%- !p.required ? '?' : '' %>: <%- p.type %><%- p.nullable ? ' | null' : '' %>,
		<%_ } -%>
		<%_ if (path.requestBodyType) { -%>
		requestBody: <%- path.requestBodyType %>,
		<%_ } -%>
		observe?: 'body',
	): Observable<<%- path.responseType %>>;
	<%- path.name %>(
		<%_ for (const p of (path.requestPathParameters ?? [])) { -%>
		<%- p.name %><%- !p.required ? '?' : '' %>: <%- p.type %><%- p.nullable ? ' | null' : '' %>,
		<%_ } -%>
		<%_ if (path.requestQueryParametersType) { -%>
		request: <%- path.requestQueryParametersType %>,
		<%_ } -%>
		<%_ if (path.requestBodyType) { -%>
		requestBody: <%- path.requestBodyType %>,
		<%_ } -%>
		observe?: 'events',
		reportProgress?: boolean,
	): Observable<HttpEvent<<%- path.responseType %>>>;
	<%- path.name %>(
		<%_ for (const p of (path.requestPathParameters ?? [])) { -%>
		<%- p.name %><%- !p.required ? '?' : '' %>: <%- p.type %><%- p.nullable ? ' | null' : '' %>,
		<%_ } -%>
		<%_ if (path.requestQueryParametersType) { -%>
		request: <%- path.requestQueryParametersType %>,
		<%_ } -%>
		<%_ if (path.requestBodyType) { -%>
		requestBody: <%- path.requestBodyType %>,
		<%_ } -%>
		observe: 'body' | 'events' = 'body',
		reportProgress?: boolean,
	): Observable<<%- path.responseType %> | HttpEvent<<%- path.responseType %>>> {
	<%_ } else { -%>
	<%- path.name %>(
		<%_ for (const p of (path.requestPathParameters ?? [])) { -%>
		<%- p.name %><%- !p.required ? '?' : '' %>: <%- p.type %><%- p.nullable ? ' | null' : '' %>,
		<%_ } -%>
		<%_ if (path.requestQueryParametersType) { -%>
		request: <%- path.requestQueryParametersType %>,
		<%_ } -%>
		<%_ if (path.requestBodyType) { -%>
		requestBody: <%- path.requestBodyType %>,
		<%_ } -%>
	): Observable<<%- path.responseType %>> {
	<%_ } -%>
		<%_ if (path.requestQueryParametersMapping) { -%>
		const params = new HttpParams({
			fromString: toQueryParams({
				<%_ for (const queryParams of (path.requestQueryParametersMapping)) { -%>
				'<%- queryParams[0] %>': request.<%- queryParams[1] %>,
				<%_ } -%>
			}),
		});

		<%_ } -%>
		<%_ if (path.isMultipart) { -%>
		const formData = new FormData();
		Object.entries(requestBody).forEach(([key, value]) => formData.append(key, value));

		<%_ } -%>
		return this.http.request<%- path.responseType !== 'string' ? `<${path.responseType}>` : '' %>(
			'<%- path.method %>',
			`<%- parametrizeUrlPattern(path.urlPattern) %>`,
			{
				<%_ if (path.requestBodyType && !path.isMultipart) { -%>
				body: <%- path.requestBodyType === 'string' ? 'JSON.stringify(requestBody)' : 'requestBody' %>,
				<%_ } -%>
				<%_ if (path.requestBodyType && path.isMultipart) { -%>
				body: formData,
				observe: observe as any,
				reportProgress,
				<%_ } -%>
				<%_ if (path.requestQueryParametersMapping) { -%>
				params,
				<%_ } -%>
				<%_ if (path.responseType === 'string') { -%>
				responseType: 'text',
				<%_ } -%>
			},
		);
	}
	<%_ } -%>
}
